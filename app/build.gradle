plugins {
    id "com.android.application"
}

ext {
    // The packageVariant defines the bootstrap variant that will be included in the app APK.
    // This must be supported by com.termux.shared.termux.TermuxBootstrap.PackageVariant or app will
    // crash at startup.
    // Bootstrap of a different variant must not be manually installed by the user after app installation
    // by replacing $PREFIX since app code is dependant on the variant used to build the APK.
    // Currently supported values are: [ "ubuntu-22.04" "ubuntu-20.04" ]
    packageVariant = System.getenv("TERMUX_PACKAGE_VARIANT") ?: "ubuntu-22.04" // Default: "ubuntu-22.04"
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
    def appVersionName = System.getenv("TERMUX_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("TERMUX_APK_VERSION_TAG") ?: ""
    def splitAPKsForDebugBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_DEBUG_BUILDS") ?: "1"
    def splitAPKsForReleaseBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_RELEASE_BUILDS") ?: "0" // F-Droid does not support split APKs #1904

    dependencies {
        implementation "androidx.annotation:annotation:1.3.0"
        implementation "androidx.core:core:1.6.0"
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.android.material:material:1.4.0"
        implementation "com.google.guava:guava:24.1-jre"
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"

        implementation project(":terminal-view")
        implementation project(":termux-shared")
    }

    defaultConfig {
        applicationId "com.ubuntux"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 118
        versionName "0.118.0"

        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        buildConfigField "String", "TERMUX_PACKAGE_VARIANT", "\"" + project.ext.packageVariant + "\"" // Used by TermuxApplication class

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.ubuntux"
        manifestPlaceholders.TERMUX_APP_NAME = "Ubuntux"
        manifestPlaceholders.TERMUX_API_APP_NAME = "Ubuntux:API"
        manifestPlaceholders.TERMUX_BOOT_APP_NAME = "Ubuntux:Boot"
        manifestPlaceholders.TERMUX_FLOAT_APP_NAME = "Ubuntux:Float"
        manifestPlaceholders.TERMUX_STYLING_APP_NAME = "Ubuntux:Styling"
        manifestPlaceholders.TERMUX_TASKER_APP_NAME = "Ubuntux:Tasker"
        manifestPlaceholders.TERMUX_WIDGET_APP_NAME = "Ubuntux:Widget"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        splits {
            abi {
                enable ((gradle.startParameter.taskNames.any { it.contains("Debug") } && splitAPKsForDebugBuilds == "1") ||
                    (gradle.startParameter.taskNames.any { it.contains("Release") } && splitAPKsForReleaseBuilds == "1"))
                reset ()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk true
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false // Reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "debug") + "_" + (abi ? abi : "universal") + ".apk")
            } else if (variant.buildType.name == "release") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "release") + "_" + (abi ? abi : "universal") + ".apk")
            }
        }
    }

}

dependencies {
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.10"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '"  + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        while (checksum.length() < 64) { checksum = "0" + checksum }
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    while (checksum.length() < 64) { checksum = "0" + checksum }
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

def createUbuntuBootstrap(String version) {
    // For now, create minimal Ubuntu rootfs structure for each architecture
    // This will be replaced with actual Ubuntu rootfs setup
    def architectures = ["aarch64", "arm", "i686", "x86_64"]
    
    architectures.each { arch ->
        def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
        def file = new File(projectDir, localUrl)
        
        if (file.exists()) {
            logger.quiet("Ubuntu bootstrap for " + arch + " already exists")
            return
        }
        
        logger.quiet("Creating Ubuntu " + version + " bootstrap for " + arch)
        file.parentFile.mkdirs()
        
        // Create a Ubuntu rootfs ZIP structure that matches what TermuxInstaller expects
        def zipOutput = new java.util.zip.ZipOutputStream(new FileOutputStream(file))
        
        // Add Ubuntu directory structure
        addZipEntry(zipOutput, "bin/", true)
        addZipEntry(zipOutput, "boot/", true)
        addZipEntry(zipOutput, "dev/", true)
        addZipEntry(zipOutput, "etc/", true)
        addZipEntry(zipOutput, "home/", true)
        addZipEntry(zipOutput, "lib/", true)
        addZipEntry(zipOutput, "media/", true)
        addZipEntry(zipOutput, "mnt/", true)
        addZipEntry(zipOutput, "opt/", true)
        addZipEntry(zipOutput, "proc/", true)
        addZipEntry(zipOutput, "root/", true)
        addZipEntry(zipOutput, "run/", true)
        addZipEntry(zipOutput, "sbin/", true)
        addZipEntry(zipOutput, "srv/", true)
        addZipEntry(zipOutput, "sys/", true)
        addZipEntry(zipOutput, "tmp/", true)
        addZipEntry(zipOutput, "usr/", true)
        addZipEntry(zipOutput, "usr/bin/", true)
        addZipEntry(zipOutput, "usr/lib/", true)
        addZipEntry(zipOutput, "usr/local/", true)
        addZipEntry(zipOutput, "usr/share/", true)
        addZipEntry(zipOutput, "var/", true)
        addZipEntry(zipOutput, "var/lib/", true)
        addZipEntry(zipOutput, "var/log/", true)
        
        // Add essential Ubuntu binaries
        addZipEntry(zipOutput, "bin/bash", false)
        addZipEntry(zipOutput, "bin/sh", false)
        addZipEntry(zipOutput, "usr/bin/apt", false)
        addZipEntry(zipOutput, "usr/bin/dpkg", false)
        
        // Add SYMLINKS.txt file that TermuxInstaller expects
        addZipEntry(zipOutput, "SYMLINKS.txt", false)
        
        zipOutput.close()
        logger.quiet("Created Ubuntu " + version + " bootstrap: " + file.absolutePath)
    }
}

def addZipEntry(zipOutput, String name, boolean isDirectory) {
    def entry = new java.util.zip.ZipEntry(name + (isDirectory ? "/" : ""))
    if (isDirectory) {
        entry.setMethod(java.util.zip.ZipEntry.STORED)
        entry.setSize(0)
        entry.setCompressedSize(0)
        entry.setCrc(0)
    }
    zipOutput.putNextEntry(entry)
    
    if (!isDirectory) {
        if (name == "SYMLINKS.txt") {
            // Add minimal symlinks content for Ubuntu
            def symlinks = """
sh←bin/bash
bash←bin/bash
""".trim()
            zipOutput.write(symlinks.getBytes())
        } else if (name.startsWith("bin/") || name.startsWith("usr/bin/")) {
            // Add minimal binary content (this will be replaced with actual binaries)
            zipOutput.write("#!/bin/bash\necho 'Ubuntu " + name + "'\n".getBytes())
        }
    }
    
    zipOutput.closeEntry()
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

task downloadBootstraps() {
    doLast {
        def packageVariant = project.ext.packageVariant
        if (packageVariant == "ubuntu-22.04") {
            // For Ubuntu 22.04, we'll create minimal Ubuntu rootfs structure
            // This will be replaced with actual Ubuntu rootfs in the future
            logger.quiet("Creating Ubuntu 22.04 bootstrap structure...")
            createUbuntuBootstrap("ubuntu-22.04")
        } else if (packageVariant == "ubuntu-20.04") {
            // For Ubuntu 20.04, we'll create minimal Ubuntu rootfs structure
            logger.quiet("Creating Ubuntu 20.04 bootstrap structure...")
            createUbuntuBootstrap("ubuntu-20.04")
        } else {
            throw new GradleException("Unsupported TERMUX_PACKAGE_VARIANT \"" + packageVariant + "\"")
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
