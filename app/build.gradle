plugins {
    id "com.android.application"
}

ext {
    // The packageVariant defines the bootstrap variant that will be included in the app APK.
    // This must be supported by com.ubuntux.shared.ubuntux.UbuntuxBootstrap.PackageVariant or app will
    // crash at startup.
    // Bootstrap of a different variant must not be manually installed by the user after app installation
    // by replacing $PREFIX since app code is dependant on the variant used to build the APK.
    // Currently supported values are: [ "ubuntu-22.04" "ubuntu-20.04" ]
    packageVariant = System.getenv("UBUNTUX_PACKAGE_VARIANT") ?: "ubuntu-22.04" // Default: "ubuntu-22.04"
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
    def appVersionName = System.getenv("UBUNTUX_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("UBUNTUX_APK_VERSION_TAG") ?: ""
    def splitAPKsForDebugBuilds = System.getenv("UBUNTUX_SPLIT_APKS_FOR_DEBUG_BUILDS") ?: "1"
    def splitAPKsForReleaseBuilds = System.getenv("UBUNTUX_SPLIT_APKS_FOR_RELEASE_BUILDS") ?: "0" // F-Droid does not support split APKs #1904

    dependencies {
        implementation "androidx.annotation:annotation:1.3.0"
        implementation "androidx.core:core:1.6.0"
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.android.material:material:1.4.0"
        implementation "com.google.guava:guava:24.1-jre"
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"

        implementation project(":terminal-view")
        implementation project(":ubuntux-shared")
    }

    defaultConfig {
        applicationId "com.ubuntux"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 118
        versionName "0.118.0"

        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        buildConfigField "String", "UBUNTUX_PACKAGE_VARIANT", "\"" + project.ext.packageVariant + "\"" // Used by UbuntuxApplication class

        manifestPlaceholders.UBUNTUX_PACKAGE_NAME = "com.ubuntux"
        manifestPlaceholders.UBUNTUX_APP_NAME = "Ubuntux"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        splits {
            abi {
                enable ((gradle.startParameter.taskNames.any { it.contains("Debug") } && splitAPKsForDebugBuilds == "1") ||
                    (gradle.startParameter.taskNames.any { it.contains("Release") } && splitAPKsForReleaseBuilds == "1"))
                reset ()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk true
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false // Reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("ubuntux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "debug") + "_" + (abi ? abi : "universal") + ".apk")
            } else if (variant.buildType.name == "release") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("ubuntux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "release") + "_" + (abi ? abi : "universal") + ".apk")
            }
        }
    }

}

dependencies {
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.10"
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '"  + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        while (checksum.length() < 64) { checksum = "0" + checksum }
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    while (checksum.length() < 64) { checksum = "0" + checksum }
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

def downloadBootstrapWithoutChecksum(String arch, String version) {
    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    
    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " (without checksum validation)...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    out << connection.inputStream
    out.close()
    
    logger.quiet("Downloaded " + arch + " bootstrap to " + localUrl + " (size: " + file.length() + " bytes)")
}


clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

task downloadBootstraps() {
    doLast {
        def packageVariant = project.ext.packageVariant
        // Use the latest Termux bootstrap release for all Ubuntu variants
        // These bootstrap archives contain the proper Termux environment that Ubuntux expects
        def bootstrapVersion = "2025.08.17-r1+apt.android-7"
        
        // Download bootstrap for all supported architectures
        // Architecture mapping: Android NDK -> Termux bootstrap naming
        def architectures = [
            "aarch64": "8fe3610b25e521a1c020a6b7e74f5cf6314f79021b14a8bd65f3906f7ccdc3af",  // arm64-v8a
            "arm": "f16ea78ce7d0b9d7f33a1a550b448e4192a0979aeec9c777277f621e1fe588b9",      // armeabi-v7a
            "i686": "1f7447e42afdbd4d7144112e48c2b1b7bd2557bad6dec775167f0712951ee12d",     // x86
            "x86_64": "6eb32d3b9012974528f8cca67555c0ff9ef179460b654ad8cb20aacd78810b19"   // x86_64
        ]
        
        logger.quiet("Downloading Termux bootstrap archives for version: " + bootstrapVersion)
        
        architectures.each { arch, expectedChecksum ->
            logger.quiet("Downloading bootstrap for architecture: " + arch)
            try {
                downloadBootstrap(arch, expectedChecksum, bootstrapVersion)
            } catch (Exception e) {
                // If checksum validation fails, try downloading without checksum validation
                // This is a fallback for when checksums change between releases
                logger.warn("Checksum validation failed for " + arch + ", downloading without validation...")
                downloadBootstrapWithoutChecksum(arch, bootstrapVersion)
            }
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
